1. Retrieve all courses in the "Programming" category:

db.Courses.aggregate([
  {
    $lookup: {
      from: "Categories",
      localField: "category",
      foreignField: "_id",
      as: "categoryDetails"
    }
  },
  { $match: { "categoryDetails.name": "Programming" } }
]);


2. Retrieve all students enrolled in the course "Introduction to MongoDB":


db.Courses.aggregate([
  { $match: { title: "Introduction to MongoDB" } },
  {
    $lookup: {
      from: "Students",
      localField: "students",
      foreignField: "_id",
      as: "enrolledStudents",
    },
  },
  { $project: { enrolledStudents: 1 } },
]);



3: Retrieve course details, including category and instructor information, for all courses.

db.Courses.aggregate([
  {
    $lookup: {
      from: "Categories",
      localField: "category",
      foreignField: "_id",
      as: "categoryDetails",
    },
  },
  {
    $lookup: {
      from: "Instructors",
      localField: "instructor",
      foreignField: "_id",
      as: "instructorDetails",
    },
  },
  {
    $project: {
      title: 1,
      description: 1,
      "categoryDetails.name": 1,
      "instructorDetails.name": 1,
    },
  },
]);


4: Retrieve all reviews for the course "Data Science with Python," including the details of the students who wrote them.

db.courses.aggregate([
  { $match: { title: "Data Science with Python" } },
  { $unwind: "$reviews" },
  {
    $lookup: {
      from: "students",
      localField: "reviews.student",
      foreignField: "_id",
      as: "reviewerDetails",
    },
  },
  { $project: { "reviews.rating": 1, "reviews.comment": 1, reviewerDetails: 1 } },
]);

5: Find the average rating for each course.

db.Courses.aggregate([
  { $unwind: "$reviews" },
  {
    $group: {
      _id: "$_id",
      title: { $first: "$title" },
      averageRating: { $avg: "$reviews.rating" },
    },
  },
]);


6: Retrieve all courses taught by the instructor "Jane Doe".

db.Courses.aggregate([
  {
    $lookup: {
      from: "Instructors",
      localField: "instructor",
      foreignField: "_id",
      as: "instructorDetails",
    },
  },
  { $match: { "instructorDetails.name": "Jane Doe" } },
]);


7: Count the number of courses in each category.


db.Courses.aggregate([
  {
    $lookup: {
      from: "Categories",
      localField: "category",
      foreignField: "_id",
      as: "categoryDetails",
    },
  },
  { $unwind: "$categoryDetails" },
  {
    $group: {
      _id: "$categoryDetails.name",
      courseCount: { $sum: 1 },
    },
  },
]);


8: Find all students who have reviewed the course "Introduction to MongoDB".

db.Courses.aggregate([
  { $match: { title: "Introduction to MongoDB" } },
  { $unwind: "$reviews" },
  {
    $lookup: {
      from: "Students",
      localField: "reviews.student",
      foreignField: "_id",
      as: "reviewerDetails",
    },
  },
  { $project: { reviewerDetails: 1 } },
]);


9: Retrieve the titles of all courses where the average rating is above 4.


db.Courses.aggregate([
  { $unwind: "$reviews" },
  {
    $group: {
      _id: "$_id",
      title: { $first: "$title" },
      averageRating: { $avg: "$reviews.rating" },
    },
  },
  { $match: { averageRating: { $gt: 4 } } },
  { $project: { title: 1, _id: 0 } },
]);


10: Retrieve all students who are enrolled in courses taught by "John Smith".


db.Courses.aggregate([
  {
    $lookup: {
      from: "Instructors",
      localField: "instructor",
      foreignField: "_id",
      as: "instructorDetails",
    },
  },
  { $match: { "instructorDetails.name": "John Smith" } },
  {
    $lookup: {
      from: "Students",
      localField: "students",
      foreignField: "_id",
      as: "enrolledStudents",
    },
  },
  { $project: { enrolledStudents: 1 } },
]);